// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  avatarUrl    String?
  bio          String?
  sessions     Session[]

  createdAt DateTime @default(now())

  @@map("users") // Renames model to users
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade) // Connects to user table as a one to many relationship

  @@map("sessions")
}

model Customer {
  id          String    @id @default(cuid())
  name        String
  phoneNumber String
  email       String
  address     String
  ssn         String
  birthday    DateTime
  userId      String
  accounts    Account[]

  createdAt DateTime @default(now())

  @@map("customers")
}

model Account {
  id            String @id @default(cuid())
  accountType   String
  accountNumber String
  customerId    String
  cards         Card[]

  customer Customer @relation(references: [id], fields: [customerId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("accounts")
}

model Card {
  id         String   @id @default(cuid())
  debitCard  Boolean
  creditCard Boolean
  cardNumber Int
  expDate    DateTime
  accountId  String

  account Account @relation(references: [id], fields: [accountId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("cards")
}
